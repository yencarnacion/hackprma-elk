---
 - name: Boot EC2 machine
   hosts: localhost
   gather_facts: false
   vars:
     server_name: "mqttserver01"
     server_type: "mqttserver"
     server_environment: "development"
     ec2_region: "us-east-1"
     # ec2_instance_type: "m3.medium"
     # ec2_image: "ami-50759d3d"
     # ec2_security_group: "REDACTED"
     # ec2_keypair: "REDACTED"
     # ec2_volume_size: 16
     # ec2_subnet_ids: ['subnet-REDACTED','subnet-REDACTED','subnet-REDACTED']
   tasks:
     - name: Create VPC
       ec2_vpc:
         state: present
         cidr_block: 10.0.0.0/16
         resource_tags: { "Name":"vpc-iot", "Environment": "{{server_environment}}" }
         subnets:
           - cidr: 10.0.0.0/24
             az: us-east-1b
             resource_tags: {"Name":"subnet_public"}
           - cidr: 10.0.1.0/24
             az: us-east-1b
             resource_tags: {"Name":"subnet_private"}
         internet_gateway: True
         region: "{{ec2_region}}"
         route_tables:
           - subnets:
               - 10.0.0.0/24
               - 10.0.1.0/24
             routes:
               - dest: 0.0.0.0/0
                 gw: igw
       register: vpc

     - name: get the host public ip
       raw: wget -qO- http://ipecho.net/plain ; echo
       register: host_ip

     - debug: msg={{ host_ip.stdout_lines[0] }}

     - name: create the iot security group 
       ec2_group:
         name: iot-group
         description: "Development IOT Group"
         vpc_id: "{{ vpc.vpc_id }}"
         region: "{{ ec2_region }}"
         rules:
           - proto: all
             from_port: 0
             to_port: 65535
             cidr_ip: "{{ host_ip.stdout_lines[0] }}/32"
         rules_egress: 
           - proto: all
             from_port: 0
             to_port: 65535
             cidr_ip: 0.0.0.0/0
       register: secgroup

     - debug: var=secgroup 

     - ec2:
         key_name: yencarnacion
         instance_type: t2.medium
         region: "{{ ec2_region }}"
         image: ami-50759d3d
         group: "iot-group"
         count: 1
         vpc_subnet_id: "{{ vpc.subnets[0].id }}"
         assign_public_ip: yes
         instance_tags: 
            Name: "{{server_name}}" 
            type: "{{server_type}}"
            env: "{{server_environment}}"
       register: ec2

     - debug: var=ec2

     - name: stop until inventory has dns
       raw: ./inventory/ec2.py --refresh-cache | ~/Dropbox/bin/jq '._meta.hostvars[] | select(.ec2_tag_Name | contains("mqttserver01"))' | ~/Dropbox/bin/jq '.ec2_public_dns_name' | sed 's/\"//g'
       register: inventory_dns
       until: inventory_dns.stdout.find("amazonaws.com") != -1
       retries: 10
       delay: 60
       ignore_errors: true

     - debug: var=inventory_dns

     - set_fact:
        inventory_dns_fact: inventory_dns.stdout_lines[0]

     - debug: var=ec2

     - name: add_host command
       add_host: name={{ item.public_dns_name }} >
             groups={{server_type}},{{server_environment}}
       with_items: "{{ec2.instances}}"

     - name: Wait for the instances to boot by checking the ssh port
       wait_for: host="{{item.public_dns_name}}" port=22 delay=60 state=started
       with_items: "{{ec2.instances}}"
